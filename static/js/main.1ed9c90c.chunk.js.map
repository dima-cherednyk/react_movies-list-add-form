{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","checkImageUrl","checkImdbUrl","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","pattern","NewMovie","onAdd","count","setCount","setTitle","setDescription","image","setImage","url","setUrl","setId","setCheckImageUrl","setCheckImdbUrl","checkForm","onSubmit","preventDefault","match","current","about","picture","link","idImdb","disabled","App","moviesFromServer","moviesList","setMoviesList","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ed9c90c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  checkImageUrl?: boolean,\n  checkImdbUrl?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  checkImageUrl = true,\n  checkImdbUrl = true,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {!checkImageUrl && (\n        <p className=\"help is-danger\">Link is required</p>\n      )}\n\n      {!checkImdbUrl && (\n        <p className=\"help is-danger\">Link is required</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useState } from 'react';\nimport { TextField } from '../TextField';\n\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\ntype Props = {\n  onAdd: (title: string, description: string, imgUrl: string,\n    imdbUrl: string, imdbId: string) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [image, setImage] = useState('');\n  const [url, setUrl] = useState('');\n  const [id, setId] = useState('');\n  const [checkImageUrl, setCheckImageUrl] = useState(true);\n  const [checkImdbUrl, setCheckImdbUrl] = useState(true);\n\n  const handleSubmit = (event: { preventDefault: () => void; }) => {\n    event.preventDefault();\n\n    if (!image.match(pattern)) {\n      setCheckImageUrl(false);\n    }\n\n    if (!url.match(pattern)) {\n      setCheckImdbUrl(false);\n    }\n\n    if (!url.match(pattern) || !image.match(pattern)) {\n      return;\n    }\n\n    setCheckImageUrl(true);\n    setCheckImdbUrl(true);\n    onAdd(title, description, image, url, id);\n    setTitle('');\n    setDescription('');\n    setImage('');\n    setUrl('');\n    setId('');\n    setCount(current => current + 1);\n  };\n\n  const toTitle = (name: string) => {\n    setTitle(name);\n  };\n\n  const toDescription = (about: string) => {\n    setDescription(about);\n  };\n\n  const toImage = (picture: string) => {\n    setCheckImageUrl(true);\n    setImage(picture);\n  };\n\n  const toUrl = (link: string) => {\n    setCheckImdbUrl(true);\n    setUrl(link);\n  };\n\n  const toId = (idImdb: string) => {\n    setId(idImdb);\n  };\n\n  const checkForm = !(title && image && url && id);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={toTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={toDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={image}\n        onChange={toImage}\n        checkImageUrl={checkImageUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={url}\n        onChange={toUrl}\n        checkImdbUrl={checkImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={id}\n        onChange={toId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={checkForm}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState(moviesFromServer);\n\n  const addMovie = (title: string, description: string, imgUrl: string,\n    imdbUrl: string, imdbId: string) => {\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    if (!imdbUrl) {\n      return null;\n    }\n\n    return setMoviesList(current => [...current, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}